"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var date_fns_1 = require("date-fns");
var cache_conf_1 = __importDefault(require("cache-conf"));
var emojic_1 = __importDefault(require("emojic"));
var api_1 = require("./util/api");
var logger_1 = __importDefault(require("./util/logger"));
var waitForUserInput_1 = __importDefault(require("./util/waitForUserInput"));
var getCacheKey = function (_a) {
    var year = _a.year, day = _a.day, token = _a.token, part = _a.part;
    return "".concat(year, ":").concat(day, ":").concat(token, ":").concat(part);
};
var AocClient = (function () {
    function AocClient(_a) {
        var year = _a.year, day = _a.day, token = _a.token, _b = _a.useCache, useCache = _b === void 0 ? true : _b, _c = _a.debug, debug = _c === void 0 ? false : _c;
        if (!year ||
            Number.isNaN(year) ||
            year < 2015 ||
            year > (0, date_fns_1.getYear)(new Date())) {
            throw new Error('Missing or invalid year option, year must be a number between 2015 and current year');
        }
        if (!day || Number.isNaN(day) || day < 1 || day > 25) {
            throw new Error('Missing or invalid day option, day must be a number between 1 and 25');
        }
        if (!token || typeof token !== 'string') {
            throw new Error('Missing or invalid token option');
        }
        if (typeof useCache !== 'boolean') {
            throw new Error('Invalid useCache option, useCache can only be boolean');
        }
        if (typeof debug !== 'boolean') {
            throw new Error('Invalid debug option, debug can only be boolean');
        }
        this.config = {
            year: year,
            day: day,
            token: token,
            useCache: useCache
        };
        if (debug) {
            globalThis.aocDebug = true;
        }
        this.cache = new cache_conf_1["default"]();
        this.transform = null;
    }
    AocClient.prototype._hasCompletedPart = function (part) {
        var cacheKey = getCacheKey(__assign(__assign({}, this.config), { part: part }));
        return this.cache.get(cacheKey) === true;
    };
    AocClient.prototype._markCompletedPart = function (part) {
        var cacheKey = getCacheKey(__assign(__assign({}, this.config), { part: part }));
        this.cache.set(cacheKey, true);
    };
    AocClient.prototype.getInput = function () {
        return __awaiter(this, void 0, void 0, function () {
            var input, trimmedInput;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger_1["default"].log('Fetching input...');
                        return [4, (0, api_1.getInput)(this.config, this.cache)];
                    case 1:
                        input = _a.sent();
                        trimmedInput = input.trim();
                        return [2, this.transform ? this.transform(trimmedInput) : trimmedInput];
                }
            });
        });
    };
    AocClient.prototype.submit = function (part, answer) {
        return __awaiter(this, void 0, void 0, function () {
            var correct, resultLogger;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (part !== 1 && part !== 2) {
                            return [2, Promise.reject(new Error('Part must be either 1 or 2'))];
                        }
                        logger_1["default"].log("Submitting part ".concat(part, "..."));
                        if (part === 1 && this._hasCompletedPart(1)) {
                            logger_1["default"].success('Part 1 already completed');
                            return [2, Promise.resolve(true)];
                        }
                        if (part === 2 && this._hasCompletedPart(2)) {
                            logger_1["default"].success('Part 2 already completed successfully, continue with next puzzle');
                            return [2, Promise.resolve(true)];
                        }
                        return [4, (0, api_1.postAnswer)({ part: part, answer: answer }, this.config, this.cache)];
                    case 1:
                        correct = (_a.sent()).correct;
                        if (correct) {
                            this._markCompletedPart(part);
                        }
                        resultLogger = correct ? logger_1["default"].success : logger_1["default"].fail;
                        resultLogger("Result: ".concat(answer));
                        if (part === 2 && correct) {
                            console.log();
                            logger_1["default"].log("All done! Great job, here's a cookie", emojic_1["default"].cookie);
                        }
                        return [2, correct];
                }
            });
        });
    };
    AocClient.prototype.run = function (parts, autoSubmit) {
        if (autoSubmit === void 0) { autoSubmit = false; }
        return __awaiter(this, void 0, void 0, function () {
            var input, results, userInput, userInput;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!parts || !parts.length || parts.length > 2) {
                            return [2, Promise.reject(new Error('Parts must be an array with length between 1 and 2'))];
                        }
                        if (typeof parts[0] !== 'function' ||
                            (parts[1] !== undefined && typeof parts[1] !== 'function')) {
                            return [2, Promise.reject(new Error('All elements in the parts array must be of type function'))];
                        }
                        if (this._hasCompletedPart(1) && this._hasCompletedPart(2)) {
                            logger_1["default"].log('Both parts already completed successfully, continue with next puzzle', emojic_1["default"].star, emojic_1["default"].star);
                            return [2, Promise.resolve()];
                        }
                        if (parts.length === 1 &&
                            this._hasCompletedPart(1) &&
                            !this._hasCompletedPart(2)) {
                            logger_1["default"].log('Part 1 already completed successfully, continue with part 2', emojic_1["default"].star);
                            return [2, Promise.resolve()];
                        }
                        return [4, this.getInput()];
                    case 1:
                        input = _a.sent();
                        results = [undefined, undefined];
                        if (!this._hasCompletedPart(1)) {
                            results[0] = parts[0](input);
                        }
                        else {
                            logger_1["default"].success('Part 1 already completed');
                        }
                        if (!this._hasCompletedPart(2) && parts.length === 2) {
                            results[1] = parts[1](input);
                        }
                        if (!autoSubmit) return [3, 6];
                        logger_1["default"].log('Submitting answers automatically');
                        if (!(results[0] !== undefined)) return [3, 3];
                        return [4, this.submit(1, results[0])];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        if (!(results[1] !== undefined)) return [3, 5];
                        return [4, this.submit(2, results[1])];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2, Promise.resolve()];
                    case 6:
                        if (!(results[0] !== undefined)) return [3, 9];
                        logger_1["default"].log('Your result from part 1 is', results[0]);
                        logger_1["default"].log('Do you want to submit it? (Y/N):');
                        return [4, (0, waitForUserInput_1["default"])()];
                    case 7:
                        userInput = _a.sent();
                        if (userInput.toLowerCase() !== 'y')
                            return [2, Promise.resolve()];
                        return [4, this.submit(1, results[0])];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9:
                        if (!(results[1] !== undefined)) return [3, 12];
                        logger_1["default"].log('Your result from part 2 is', results[1]);
                        logger_1["default"].log('Do you want to submit it? (Y/N):');
                        return [4, (0, waitForUserInput_1["default"])()];
                    case 10:
                        userInput = _a.sent();
                        if (userInput.toLowerCase() !== 'y')
                            return [2, Promise.resolve()];
                        return [4, this.submit(2, results[1])];
                    case 11:
                        _a.sent();
                        _a.label = 12;
                    case 12: return [2, Promise.resolve()];
                }
            });
        });
    };
    AocClient.prototype.setInputTransform = function (transform) {
        if (typeof transform !== 'function')
            throw new Error('transform must be a function');
        this.transform = transform;
    };
    return AocClient;
}());
exports["default"] = AocClient;
//# sourceMappingURL=AocClient.js.map